{"version":3,"sources":["components/PageHeader/style.module.css","components/RadioButtons/style.module.css","constants/index.js","components/PageHeader/index.js","components/PageHeader/PageHeader.jsx","components/RadioButtons/index.js","components/RadioButtons/RadioButtons.jsx","containers/AddBlockForm/index.js","containers/AddBlockForm/AddBlockForm.jsx","helpers/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","back_link","radio_btn","STATUSES","key","text","value","CROPS_LIST","PageHeader","_ref","onFormSubmit","react_default","a","createElement","className","styles","href","Icon","name","Header","as","Button","secondary","size","floated","onClick","RadioButtons","onChange","data","_ref2","target","map","btn","basic","type","active","AddBlockForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","blockName","blockSize","crop","date","noRows","rowSpacing","treesSpacing","actualTrees","treesVines","age","status","treesHa","defaultErrorsState","blockNameError","blockSizeError","cropError","noRowsError","rowSpacingError","treesSpacingError","actualTreesError","statusError","bind","assertThisInitialized","handleCalendarChange","onFieldChange","handleStatusChange","updateComputedFields","updateTreesHa","updateTreesVines","updateAge","event","setState","defineProperty","_this$state","_this$state2","dateValue","moment","valid","isValid","diff","isNaN","_ref3","s","_this$state3","content","Number","console","log","Container","components_PageHeader","Form","Grid","Row","columns","Column","Field","required","Input","label","error","components_RadioButtons","Label","pointing","prompt","placeholder","labelPosition","control","readOnly","only","width","commonjs","dateFormat","icon","iconPosition","Select","options","TextArea","React","Component","App","containers_AddBlockForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.865145f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"style_header__14a2R\",\"back_link\":\"style_back_link__3eNy0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"radio_btn\":\"style_radio_btn__1_vtH\"};","export const STATUSES = [\n  {\n    key: 'planting',\n    text: 'Planting',\n    value: 'planting'\n  },\n  {\n    key: 'preparation',\n    text: 'Preparation',\n    value: 'preparation'\n  },\n  {\n    key: 'transplanting',\n    text: 'Transplanting',\n    value: 'transplanting',\n  }\n];\n\nexport const CROPS_LIST = [\n  {\n    key: 'apples',\n    text: 'Apples',\n    value: 'apples',\n  },\n  {\n    key: 'pears',\n    text: 'Pears',\n    value: 'pears',\n  },\n  {\n    key: 'stone_fruits',\n    text: 'Stone fruits',\n    value: 'stone_fruits',\n  },\n  {\n    key: 'table_grape',\n    text: 'Table grape',\n    value: 'table_grape',\n  },\n  {\n    key: 'citrus',\n    text: 'Citrus',\n    value: 'citrus',\n  },\n];\n\n\nexport const DATE_FORMAT = \"DD/MM/YYYY\";\nexport const FIELD_EMPTY_ERROR = 'This field is required!';","import PageHeader from \"./PageHeader\";\n\nexport default PageHeader;","import React from 'react';\nimport { Button, Header, Icon } from 'semantic-ui-react';\nimport styles from './style.module.css';\n\nconst PageHeader = ({ onFormSubmit }) => (\n  <div className={styles.header}>\n    <div className='d_flex ai_center'>\n      <a\n        href=\"#back\"\n        className={styles.back_link}>\n        <Icon name={'angle left'} />\n      </a>\n      <Header\n        as={'h2'}\n        className='atomic m_0'>\n        Add Block\n      </Header>\n    </div>\n    <Button\n      secondary\n      size='large'\n      floated='right'\n      onClick={onFormSubmit}>\n      Add\n\t\t</Button>\n  </div>\n);\n\nexport default PageHeader;","import RadioButtons from \"./RadioButtons\";\n\nexport default RadioButtons;","import React from 'react';\nimport { Button, Form, Label } from 'semantic-ui-react';\nimport styles from './style.module.css';\n\nconst RadioButtons = ({ value, onChange, name, data }) => {\n  const onClick = ({ target }) => {\n    onChange({}, { name, value: target.name });\n  };\n\n  return (\n    <div>\n      {data.map((btn) =>\n        <Button\n          key={btn.key}\n          basic\n          type=\"button\"\n          active={btn.value === value}\n          name={btn.value}\n          onClick={onClick}\n          className={styles.radio_btn}\n        >\n          {btn.text}\n        </Button>)}\n    </div>\n  );\n};\n\nexport default RadioButtons;","import AddBlockForm from \"./AddBlockForm\";\n\nexport default AddBlockForm;","import React from 'react';\nimport moment from 'moment';\nimport { Label, Input, Header, Grid, Form, Container, Select, TextArea, Message, GridColumn } from 'semantic-ui-react';\nimport { DateInput } from 'semantic-ui-calendar-react';\nimport { STATUSES, DATE_FORMAT, CROPS_LIST } from '../../constants/';\nimport { isPositiveFloat } from '../../helpers/';\nimport PageHeader from '../../components/PageHeader/';\nimport RadioButtons from '../../components/RadioButtons';\n\nclass AddBlockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blockName: '',\n      blockSize: 0,\n      crop: '',\n      date: '',\n      noRows: '',\n      rowSpacing: '',\n      treesSpacing: '',\n      actualTrees: 0,\n      treesVines: 0,\n      age: 0,\n      status: '',\n      treesHa: 0,\n      ...this.defaultErrorsState\n    };\n    this.defaultErrorsState = {\n      blockNameError: false,\n      blockSizeError: false,\n      cropError: false,\n      noRowsError: false,\n      rowSpacingError: false,\n      treesSpacingError: false,\n      actualTreesError: false,\n      statusError: false\n    }\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.handleCalendarChange = this.handleCalendarChange.bind(this);\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n    this.updateComputedFields = this.updateComputedFields.bind(this);\n    this.updateTreesHa = this.updateTreesHa.bind(this)\n    this.updateTreesVines = this.updateTreesVines.bind(this)\n    this.updateAge = this.updateAge.bind(this)\n  }\n\n  onFieldChange(event, data) {\n    const { target } = event;\n    const { name, value } = data || target;\n\n    this.setState({\n      [name]: value\n    });\n    this.updateComputedFields()\n  }\n\n  updateComputedFields() {\n    this.updateTreesHa();\n    this.updateTreesVines();\n  }\n\n  updateTreesHa() {\n    const { rowSpacing, treesSpacing } = this.state\n\n    const treesHa = rowSpacing && treesSpacing\n      ? 10000 / this.state.rowSpacing / this.state.treesSpacing\n      : 0\n    this.setState({ treesHa })\n    return treesHa\n  }\n\n  updateTreesVines() {\n    const { blockSize, treesHa } = this.state\n    const treesVines = blockSize && treesHa\n      ? blockSize * treesHa\n      : 0\n    this.setState({ treesVines })\n    return treesVines\n  }\n\n  updateAge(dateValue) {\n    const date = moment(dateValue, DATE_FORMAT, true);\n    const valid = date.isValid();\n    const diff = moment().diff(date, 'years');\n\n    const age = valid && !isNaN(diff) ? diff : 0;\n    this.setState({ age })\n    return age\n  }\n\n\n  handleCalendarChange(event, {value}) {\n    this.setState({ date: value });\n    this.updateAge(value);\n  }\n\n  handleStatusChange(event, { value }) {\n    this.setState({\n      statusError: false,\n      status: value\n    });\n  }\n\n  onFormSubmit() {\n    const {\n      blockName,\n      blockSize,\n      crop,\n      noRows,\n      rowSpacing,\n      treesSpacing,\n      actualTrees,\n      status\n    } = this.state;\n\n    this.setState({\n      ...this.defaultErrorsState\n    });\n    if (!blockName) this.setState({blockNameError : { content: 'Please enter your block name' }});\n    if (!blockSize) {\n      this.setState({ blockSizeError: { content: 'Please enter your block size' } });\n    } else if(!isPositiveFloat(+blockSize)) {\n      this.setState({ blockSizeError: { content: 'Please enter positive float' } });\n    }\n    if (!crop) this.setState({ cropError: true });\n\n    if (!noRows) this.setState({ noRowsError: { content: 'Please enter your no.rows' } });\n    if (!rowSpacing) this.setState({ rowSpacingError: { content: 'Please enter your row spacing' } });\n    if (!treesSpacing) this.setState({ treesSpacingError: { content: 'Please enter your tree spacing' } });\n    if (!actualTrees) this.setState({ actualTreesError: { content: 'Please enter your actual no. trees' } });\n    if (!status) this.setState({ statusError: { content: 'Please pick a status' } });\n\n    // prepared object to send\n    console.log({...this.state});\n  }\n\n  render() {\n    return (\n      <Container>\n        <PageHeader onFormSubmit={this.onFormSubmit}></PageHeader>\n        <Form>\n          <Grid>\n            <Grid.Row columns={2}>\n              <Grid.Column>\n                <Form.Field required>\n                  <Form.Input\n                    label='Block name'\n                    name='blockName'\n                    required\n                    onChange={this.onFieldChange}\n                    error={this.state.blockNameError}\n                    >\n                  </Form.Input>\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column>\n                <Form.Field required>\n                  <Form.Input\n                    label=\"Block's size\"\n                    name='blockSize'\n                    type='number'\n                    required\n                    onChange={this.onFieldChange}\n                    error={this.state.blockSizeError}\n                  >\n                  </Form.Input>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field\n                  required\n                  className=\"label--left\">\n                  <label>Select your crop</label>\n                  <RadioButtons\n                    onChange={this.onFieldChange}\n                    name='crop'\n                    value={this.state.crop}\n                    data={CROPS_LIST}\n                  />\n                  {this.state.cropError ? (\n                  <Label pointing prompt>\n                    Please select your crop\n                  </Label>\n                  ) : ''}\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Header\n              as={'h3'}\n              className='atomic fw_400'>\n              Block’s structure\n            </Header>\n            <Grid.Row columns={3}>\n              <Grid.Column>\n                <Form.Field required>\n                  <Form.Input\n                    label='No. Rows'\n                    name='noRows'\n                    required\n                    onChange={this.onFieldChange}\n                    error={this.state.noRowsError}\n                  >\n                  </Form.Input>\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column>\n                <Form.Field\n                  className={this.state.rowSpacingError ? 'error' : ''}\n                  required>\n                  <label>Row spacing</label>\n                  <Input\n                    name='rowSpacing'\n                    onChange={this.onFieldChange}\n                    type='number'\n                    placeholder='in meters'\n                    label='m'\n                    labelPosition='right'/>\n                    {this.state.rowSpacingError ? (\n                    <Label pointing prompt>\n                      {this.state.rowSpacingError.content}\n                    </Label>\n                  ) : ''}\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column>\n                <Form.Field\n                  className={this.state.treesSpacingError ? 'error' : ''}\n                  required>\n                  <label>Tree spacing</label>\n                  <Input\n                    name='treesSpacing'\n                    onChange={this.onFieldChange}\n                    type='number'\n                    placeholder='in meters'\n                    label='m'\n                    labelPosition='right' />\n                  {this.state.treesSpacingError ? (\n                    <Label pointing prompt>\n                      {this.state.treesSpacingError.content}\n                    </Label>\n                  ) : ''}\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns='equal'>\n              <Grid.Column>\n                <Form.Field\n                  name='treesHa'\n                  value={this.state.treesHa}\n                  label='Trees/Ha'\n                  control='input'\n                  readOnly/>\n              </Grid.Column>\n              <Grid.Column>\n                <Form.Field\n                  name='treesVines'\n                  value={this.state.treesVines}\n                  label='Trees/Vines'\n                  control='input'\n                  readOnly/>\n              </Grid.Column>\n              <Grid.Column only='computer'>\n                <Form.Field required>\n                  <Form.Input\n                    label='Actual No. of Trees'\n                    name='actualTrees'\n                    required\n                    onChange={this.onFieldChange}\n                    error={this.state.actualTreesError}\n                  >\n                  </Form.Input>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row only='mobile tablet'>\n              <Grid.Column width='8'>\n                <Form.Field required>\n                  <Form.Input\n                    label='Actual No. of Trees'\n                    name='actualTrees'\n                    required\n                    onChange={this.onFieldChange}\n                    error={this.state.actualTreesError}\n                  >\n                  </Form.Input>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns='equal'>\n              <Grid.Column>\n                <Form.Field>\n                  <label>Date of Planting</label>\n                  <DateInput\n                    name='date'\n                    placeholder={DATE_FORMAT}\n                    dateFormat={DATE_FORMAT}\n                    value={this.state.date}\n                    icon='calendar outline'\n                    iconPosition='right'\n                    onChange={this.handleCalendarChange}\n                  />\n                </Form.Field>\n              </Grid.Column>\n              <Grid.Column>\n                <Form.Field\n                  name='age'\n                  label='Age'\n                  readOnly\n                  control='input'\n                  type='number'\n                  value={this.state.age}/>\n              </Grid.Column>\n              <Grid.Column only='computer'>\n                <Form.Field\n                  className={this.state.statusError ? 'error' : ''}\n                  required>\n                  <label>Farm Status</label>\n                  <Select\n                    value={this.state.status}\n                    placeholder='Select your farm status'\n                    onChange={this.handleStatusChange}\n                    options={STATUSES} />\n                  {this.state.statusError ? (\n                    <Label pointing prompt>\n                      {this.state.statusError.content}\n                    </Label>\n                  ) : ''}\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row only='mobile tablet'>\n              <Grid.Column width='8'>\n                <Form.Field\n                  className={this.state.statusError ? 'error' : ''}\n                  required>\n                  <label>Farm Status</label>\n                  <Select\n                    value={this.state.status}\n                    placeholder='Select your farm status'\n                    onChange={this.handleStatusChange}\n                    options={STATUSES} />\n                  {this.state.statusError ? (\n                    <Label pointing prompt>\n                      {this.state.statusError.content}\n                    </Label>\n                  ) : ''}\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <Form.Field>\n                  <label>Commets & Notes</label>\n                  <TextArea/>\n                </Form.Field>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Form>\n      </Container>\n    )\n  }\n}\n\n\nexport default AddBlockForm;","export const isPositiveFloat = (s) => {\n  return !isNaN(s) && Number(s) > 0;\n}","import React from 'react';\nimport 'semantic-ui-css/semantic.css';\nimport './semantic.custom.css';\nimport './atomic.css';\nimport AddBlockForm from './containers/AddBlockForm/';\n\nconst App = () => <AddBlockForm/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}